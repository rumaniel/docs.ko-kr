### YamlMime:Tutorial
title: Hello World - C# 소개 대화형 C# 자습서
metadata:
  title: Hello World - C# 소개 대화형 C# 자습서
  description: 이 자습서에서는 브라우저를 사용하여 C#을 대화형으로 학습할 수 있습니다. C# 코드를 작성하고 브라우저에서 직접 코드를 컴파일하고 실행한 결과를 확인할 수 있습니다.
  audience: Developer
  level: Beginner
  ms.date: 08/24/2018
  nextTutorialHref: numbers-in-csharp.yml
  nextTutorialTitle: C#의 숫자
  displayType: two-column
  interactive: csharp
  ms.custom: mvc
  ms.openlocfilehash: 36254062835b9ab70ba470f6286b7515003dec11
  ms.sourcegitcommit: 205b9a204742e9c77256d43ac9d94c3f82909808
  ms.translationtype: HT
  ms.contentlocale: ko-KR
  ms.lasthandoff: 09/10/2019
  ms.locfileid: "70850789"
items:
- durationInMinutes: 1
  content: >
    이 자습서는 브라우저를 사용하여 C#을 작성하고 코드를 컴파일하고 실행한 결과를 확인하는 방법을 대화형으로 설명합니다. 여기에는 “Hello World” 프로그램으로 시작하는 일련의 단원이 포함되어 있습니다. 이러한 단원에서는 C# 언어의 기본 사항을 설명합니다.
- title: 첫 번째 C# 프로그램 실행
  durationInMinutes: 2
  content: >
    대화형 창에서 다음 코드를 실행합니다. 그렇게 하려면 대화형 창에 다음 코드 블록을 입력하고 **실행** 단추를 클릭합니다.


    ```csharp

    Console.WriteLine("Hello World!");

    ```


    지금까지 첫 번째 C# 프로그램을 실행했습니다. “Hello World!” 메시지를 출력하는 간단한 프로그램입니다. <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 메서드를 사용하여 해당 메시지를 출력했습니다. `Console`은 콘솔 창을 나타내는 형식입니다. `WriteLine`은 텍스트를 해당 텍스트 콘솔에 출력하는 `Console` 형식의 메서드입니다.


    계속하여 자세히 살펴보겠습니다. 이 단원의 나머지 부분에서는 C#에서 텍스트를 나타내는 `string` 형식 작업을 살펴봅니다. `Console` 형식과 마찬가지로 `string` 형식에는 메서드가 있습니다. `string` 메서드는 텍스트 작업을 수행합니다.


    > [!NOTE]

    > 이 온라인 코딩 환경은 미리 보기 모드로 제공됩니다. 문제가 발생하면 [dotnet/try 리포지토리](https://github.com/dotnet/try/issues)에 보고하세요.
- title: 변수 선언 및 사용
  durationInMinutes: 3
  content: >
    첫 번째 프로그램에서 `string` “Hello World!”를 화면에 출력했습니다.


    > [!TIP]

    > C# (또는 다른 프로그래밍 언어)를 살펴보면서 코드를 작성할 때 실수를 하게 될 것입니다. **컴파일러**는 그러한 오류를 찾아 사용자에게 보고합니다. 출력에 오류 메시지가 포함되어 있으면 예제 코드와 대화형 창의 코드를 자세히 살펴보고 수정 사항을 확인하세요.

    > 이 연습은 C# 코드의 구조를 학습하는 데 도움이 됩니다.


    첫 번째 프로그램은 메시지를 하나만 출력할 수 있습니다. **변수**를 사용하여 유용한 프로그램을 더 많이 작성할 수 있습니다. **변수**는 여러 값을 사용하여 동일한 코드를 실행하는 데 사용할 수 있는 기호입니다. 사용해 보겠습니다. 대화형 창에서 작성한 코드를 다음 코드로 바꿉니다.


    ```csharp

    string aFriend = "Bill";

    Console.WriteLine(aFriend);

    ```


    첫 번째 줄은 `aFriend` 변수를 선언하고 “Bill” 값을 할당합니다. 두 번째 줄은 이름을 출력합니다.


    선언한 변수에 여러 값을 할당할 수 있습니다. 이름을 친구 이름으로 변경할 수 있습니다. 대화형 창에서 이미 추가한 코드 뒤에 이 두 줄을 추가합니다.


    ```csharp

    aFriend = "Maira";

    Console.WriteLine(aFriend);

    ```


    동일한 코드 줄은 `aFriend` 변수에 저장된 값에 따라 두 가지 다른 메시지를 출력합니다.


    또한 마지막 두 메시지에서 “Hello” 단어가 누락되었음을 알 수 있습니다. 지금 수정해 보겠습니다.  메시지를 다음으로 출력하는 줄을 수정합니다.


    ```csharp

    Console.WriteLine("Hello " + aFriend);

    ```


    **실행**을 클릭하여 결과를 다시 확인합니다.


    `+`를 사용하여 **변수** 및 **상수** 문자열에서 문자열을 빌드했습니다. 더 나은 방법이 있습니다.

    `{` 및 `}` 문자 사이에 변수를 배치하여 텍스트를 변수 값으로 바꾸도록 C#에 지시할 수 있습니다.


    이를 [문자열 보간](../../language-reference/tokens/interpolated.md)이라고 합니다.


    문자열의 여는 따옴표 앞에 `$`를 추가하면 중괄호 사이 문자열 안에 `aFriend` 같은 변수를 포함할 수 있습니다. 시험해 보기:



    ```csharp

    Console.WriteLine($"Hello {aFriend}");

    ```


    **실행**을 클릭하여 결과를 다시 확인합니다. “Hello {aFriend}” 대신 메시지는 “Hello Maira”여야 합니다.


    > [!NOTE]

    > 이 온라인 코딩 환경은 미리 보기 모드로 제공됩니다. 문제가 발생하면 [dotnet/try 리포지토리](https://github.com/dotnet/try/issues)에 보고하세요.
- title: 문자열 작업
  durationInMinutes: 5
  content: >
    문자열을 사용하여 수행할 수 있는 작업을 살펴보았습니다. 더 자세히 살펴보겠습니다.


    중괄호 사이에는 단일 변수로 제한되지 않습니다. 다음과 같이 해보세요.


    ```csharp

    string firstFriend = "Maria";

    string secondFriend = "Sage";

    Console.WriteLine($"My friends are {firstFriend} and {secondFriend}");

    ```


    문자열을 자세히 살펴보면 해당 문자열이 문자 모음 이상의 의미가 있음을 알 수 있습니다. `Length`를 사용하여 문자열의 길이를 찾을 수 있습니다. `Length`는 문자열의 **속성**이고 해당 문자열의 문자 수를 반환합니다. 대화형 창의 맨 아래에 다음 코드를 추가합니다.


    ```csharp

    Console.WriteLine($"The name {firstFriend} has {firstFriend.Length} letters.");

    Console.WriteLine($"The name {secondFriend} has {secondFriend.Length} letters.");

    ```


    > [!TIP]

    > 이제 스스로 학습해 보세요. `Console.WriteLine()`으로 화면에 텍스트를 작성하는 방법을 학습했습니다. 변수를 선언하고 문자열을 함께 연결하는 방법을 학습했습니다. 대화형 창에서 연습하세요. 창에는 수행할 수 있는 작업에 대한 제안을 제공하는 **IntelliSense** 기능이 있습니다. `firstFriend`에서 `d` 뒤에 `.`를 입력합니다. 사용할 수 있는 속성 및 메서드에 대한 제안 목록이 표시됩니다.


    > [!NOTE]

    > 이 온라인 코딩 환경은 미리 보기 모드로 제공됩니다. 문제가 발생하면 [dotnet/try 리포지토리](https://github.com/dotnet/try/issues)에 보고하세요.
- title: 더 많은 문자열 작업
  durationInMinutes: 5
  content: >
    **메서드** <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>을 사용하여 메시지를 출력했습니다. **메서드**는 몇몇 작업을 구현하는 코드 블록입니다. 메서드에는 액세스할 수 있도록 이름이 있습니다.


    문자열에 표시하지 않으려는 선행 또는 후행 공백이 있다고 가정합니다. 문자열에서 공백을 **잘라내려고** 합니다.

    <xref:System.String.Trim%2A> 메서드 및 관련 메서드 <xref:System.String.TrimStart%2A> 및 <xref:System.String.TrimEnd%2A>는 해당 작업을 수행합니다. 선행 및 후행 공백을 제거하는 데는 해당 메서드만 사용할 수 있습니다. 다음 코드를 사용해 봅니다.


    ```csharp

    string greeting = "      Hello World!       ";

    Console.WriteLine($"[{greeting}]");


    string trimmedGreeting = greeting.TrimStart();

    Console.WriteLine($"[{trimmedGreeting}]");


    trimmedGreeting = greeting.TrimEnd();

    Console.WriteLine($"[{trimmedGreeting}]");


    trimmedGreeting = greeting.Trim();

    Console.WriteLine($"[{trimmedGreeting}]");

    ```


    이 샘플에서는 문자열 작업에 대한 몇 가지 중요한 개념을 자세히 설명합니다. 문자열을 조작하는 메서드는 수정하기보다는 새 문자열 개체를 반환합니다. `Trim` 메서드에 대한 각 호출은 새 문자열을 반환하지만 원래 메시지는 변경하지 않습니다.


    문자열 작업에 사용할 수 있는 다른 메서드가 있습니다. 예를 들어 이전 편집기 또는 워드 프로세서에서 검색 및 바꾸기 명령을 사용했을 수 있습니다. <xref:System.String.Replace%2A> 메서드는 문자열에서와 유사하게 작동합니다. 하위 문자열을 검색하여 다른 텍스트로 바꿉니다. <xref:System.String.Replace%2A> 메서드는 두 **매개 변수**를 사용합니다. 괄호 사이의 문자열입니다. 첫 번째 문자열은 검색할 텍스트입니다. 두 번째 문자열은 바꿀 텍스트입니다. 직접 해보세요. 이 코드를 추가합니다. 코드를 입력하여 `sayHello` 변수 뒤에 `.Re` 입력을 시작할 때 힌트를 확인합니다.


    ```csharp

    string sayHello = "Hello World!";

    Console.WriteLine(sayHello);

    sayHello = sayHello.Replace("Hello", "Greetings");

    Console.WriteLine(sayHello);

    ```


    두 가지 다른 유용한 메서드는 문자열을 모두 대문자로 지정하거나 모두 소문자로 지정합니다. 다음 코드를 사용해 봅니다. 코드를 입력하여 **IntelliSense**가 `To` 입력을 시작할 때 힌트를 제공하는 방법을 확인합니다.


    ```csharp

    Console.WriteLine(sayHello.ToUpper());

    Console.WriteLine(sayHello.ToLower());

    ```


    > [!NOTE]

    > 이 온라인 코딩 환경은 미리 보기 모드로 제공됩니다. 문제가 발생하면 [dotnet/try 리포지토리](https://github.com/dotnet/try/issues)에 보고하세요.
- title: 검색 문자열
  durationInMinutes: 10
  content: >
    *검색 및 바꾸기* 작업의 다른 부분은 문자열에서 텍스트를 찾는 것입니다. 검색에 <xref:System.String.Contains%2A> 메서드를 사용할 수 있습니다. 문자열에 하위 문자열이 포함되어 있는지 여부를 알려 줍니다. 다음 코드를 사용하여 <xref:System.String.Contains%2A>를 살펴봅니다.


    ```csharp

    string songLyrics = "You say goodbye, and I say hello";

    Console.WriteLine(songLyrics.Contains("goodbye"));

    Console.WriteLine(songLyrics.Contains("greetings"));

    ```


    <xref:System.String.Contains%2A> 메서드는 검색한 문자열을 찾았는지 여부를 알려주는 **부울** 값을 반환합니다. **부울**은 `true` 또는 `false` 값을 저장합니다. 이후 단원에서 **부울** 값에 대해 자세히 학습합니다.


    ***과제***


    문자열 내 하위 문자열을 검색하는 두 개의 유사한 메서드 <xref:System.String.StartsWith%2A> 및 <xref:System.String.EndsWith%2A>가 있습니다. 이러한 메서드는 문자열의 시작 또는 끝 부분에 있는 하위 문자열을 찾습니다. 이전 샘플을 수정하여 <xref:System.String.Contains%2A> 대신 <xref:System.String.StartsWith%2A> 및 <xref:System.String.EndsWith%2A>를 사용해 보세요. 문자열의 시작 부분에서 “You” 또는 “goodbye”를 검색합니다. 문자열 끝 부분에서 “hello” 또는 “goodbye”를 검색합니다.


    > [!NOTE]

    > 문자열 끝에 있는 텍스트를 테스트할 때에는 구두점을 확인합니다. 문자열이 마침표로 끝나는 경우 마침표로 끝나는 문자열을 확인해야 합니다.


    “You”로 시작하고 “hello”로 끝나는 `true`를, “goodbye”로 시작 또는 끝나는 경우 false를 받아야 합니다.


    > [!NOTE]

    > 이 온라인 코딩 환경은 미리 보기 모드로 제공됩니다. 문제가 발생하면 [dotnet/try 리포지토리](https://github.com/dotnet/try/issues)에 보고하세요.
- title: 과제 완료
  durationInMinutes: 3
  content: >
    다음과 같은 답을 제시했나요?


    ```csharp

    string songLyrics = "You say goodbye, and I say hello";

    Console.WriteLine(songLyrics.StartsWith("You"));

    Console.WriteLine(songLyrics.StartsWith("goodbye"));


    Console.WriteLine(songLyrics.EndsWith("hello"));

    Console.WriteLine(songLyrics.EndsWith("goodbye"));

    ```


    > [!NOTE]

    > 이 온라인 코딩 환경은 미리 보기 모드로 제공됩니다. 문제가 발생하면 [dotnet/try 리포지토리](https://github.com/dotnet/try/issues)에 보고하세요.
- content: >-
    “Hello C#” C# 소개 자습서를 완료했습니다. 아래 **C#** 링크에서 번호를 클릭하여 다음 대화형 자습서를 시작하거나, [.NET 사이트](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro)에서 .NET Core SDK를 다운로드하고 머신에 프로젝트를 만들고 계속 코딩할 수 있습니다. “다음 단계” 섹션은 이 자습서로 돌아옵니다.


    `string` 형식에서 추가 정보:

    - [문자열](../../programming-guide/strings/index.md)에서 [C# 프로그래밍 가이드](../../programming-guide/index.md) 토픽.

    - [문자열 작업에 대한 방법 팁](../../how-to/index.md#working-with-strings).
